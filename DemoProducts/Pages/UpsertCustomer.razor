@page "/upsertcustomer"
@using DemoProducts.Data
@using DemoProducts.Repository
@inject ICustomerRepository _customerRepository
@inject NavigationManager _navigationManager


<h4 class="card-title text-primary">Add Customer</h4>

@if (IsLoading)
{
    <div class="text-center">
        <img src="/images/loading.gif">
    </div>
}
else
{
    <div class="row p-2 col-4 bg-light">
        <EditForm Model="Customer" id="my-form-ref" OnValidSubmit="@UpdateInsertCustomer">
            <DataAnnotationsValidator/>
            @*<ValidationSummary/>*@
            <div >

                <h5 class="card-title text-secondary">Customer Info</h5>
                <hr/>

                <label>Company name</label>
                <InputText @bind-Value="Customer.CompanyName" class="form-control"></InputText>
                <ValidationMessage For="() => Customer.CompanyName"></ValidationMessage>

                <label>Contact name</label>
                <InputText @bind-Value="Customer.ContactName" class="form-control"></InputText>
                <ValidationMessage For="() => Customer.ContactName"></ValidationMessage>

                <label>Phone number</label>
                <InputText @bind-Value="Customer.PhoneNumber" class="form-control"></InputText>
                <ValidationMessage For="() => Customer.PhoneNumber"></ValidationMessage>

                <label>Email addres</label>
                <InputText @bind-Value="Customer.EmailAddress" class="form-control"></InputText>
                <ValidationMessage For="() => Customer.EmailAddress"></ValidationMessage>

                <br/>

                <h5 class="card-title text-secondary">Address</h5>
                <hr/>
                <label>Steet</label>
                <InputText @bind-Value="Customer.Street" class="form-control"></InputText>
                <ValidationMessage For="() => Customer.Street"></ValidationMessage>

                <label>City</label>
                <InputText @bind-Value="Customer.City" class="form-control"></InputText>
                <ValidationMessage For="() => Customer.City"></ValidationMessage>

                <label>State</label>
                <InputText @bind-Value="Customer.State" class="form-control"></InputText>
                <ValidationMessage For="() => Customer.State"></ValidationMessage>

                <label>Zip Code</label>
                <InputText @bind-Value="Customer.ZipCode" class="form-control"></InputText>
                <ValidationMessage For="() => Customer.ZipCode"></ValidationMessage>
                
            </div>
            <div class="form-group mt-2">
                <button class="btn btn-primary" type="submit" form="my-for-ref">Create</button>
                <NavLink href="customer" class="btn btn-secondary">Cancel</NavLink>
            </div>
        </EditForm>
    </div>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private CustomerDto Customer { get; set; } = new CustomerDto();
    private string Title { get; set; } = "Create";
    private bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
    //create
                IsLoading = false;
            }
            else
            {
    //update
                Title = "Update";
                await LoadCustomer();
            }
        }
    }

    private async Task LoadCustomer()
    {
        IsLoading = true;
        StateHasChanged();
        Customer = await _customerRepository.Get(Id);
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpdateInsertCustomer()
    {
        if (Customer.Id == 0)
        {
        //create
            await _customerRepository.Create(Customer);
        }
        else
        {
        //update
            await _customerRepository.Update(Customer);
        }
        _navigationManager.NavigateTo("customers");
    }

}