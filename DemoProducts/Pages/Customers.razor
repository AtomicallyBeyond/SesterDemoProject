@page "/customers"
@using DemoProducts.Data
@using DemoProducts.Repository

@inject ICustomerRepository _customerRepository


<button class="btn btn-primary mr-auto" @onclick="() => ShowCustomerDialog(0)">+Add Customer</button>
<br/>


<div style="overflow-x:auto;">
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th>Company</th>
            <th>Contact Name</th>
            <th>Phone Number</th>
            <th>Email Address</th>
            <th>Address</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var customer in CustomerList)
        {
            _tempAddress
                = customer.Street + ", "
                  + customer.City + ", "
                  + customer.State + " "
                  + customer.ZipCode;

            <tr>
                <td>@customer.CompanyName</td>
                <td>@customer.ContactName</td>
                <td>@customer.PhoneNumber</td>
                <td>@customer.EmailAddress</td>
                <td word-wrap:break-word>@_tempAddress</td>
                <td>
                    <button class="btn btn-secondary" @onclick="() => { ShowCustomerDialog(customer.Id);}">Edit</button>
                    <button class="btn btn-danger" @onclick="() => { deleteCustomer(customer.Id);}">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<br/>

@if (_showDialog)
{
    <_CustomerDialog OnClose="@CloseCustomerDialog" Id="_currentId"></_CustomerDialog>
}

@code {

    private int _currentId = 0;
    private string _tempAddress = "";
    private bool _showDialog = false;
    public bool IsLoading { get; set; }
    private IEnumerable<CustomerDto> CustomerList { get; set; } = new List<CustomerDto>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCustomers();
        }
    }

    private async Task LoadCustomers()
    {
        IsLoading = true;
        StateHasChanged();
        CustomerList = await _customerRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void ShowCustomerDialog(int id)
    {
        _currentId = id;
        _showDialog = true;
    }

    private void deleteCustomer(int id)
    {
        
    }

    private void CloseCustomerDialog()
    {
        _showDialog = false;
        LoadCustomers();
    }

}