@using DemoProducts.Repository
@using Microsoft.AspNetCore.Components
@using DemoProducts.Data

@inject ICustomerRepository CustomerRepository
@inject NavigationManager NavigationManager

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title text-primary">Add Customer</h4>
            </div>


            <div class="modal-body">

                @if (IsLoading)
                {
                    <div class="text-center">
                        <img src="/images/loading.gif">
                    </div>
                }
                else
                {
                    <div class="form-group col-12 bg-light">
                        <EditForm Model="Customer" OnValidSubmit="@UpdateInsertCustomer" id="customerForm">
                            <DataAnnotationsValidator/>
                            <div >
                                <h5 class="card-title text-secondary">Customer Info</h5>
                                <hr/>

                                <label for="CompanyName">Company name</label>
                                <InputText Id="CompanyName" @bind-Value="Customer.CompanyName" class="form-control"></InputText>
                                <ValidationMessage For="() => Customer.CompanyName"></ValidationMessage>

                                <label for="ContactName">Contact name</label>
                                <InputText Id="ContactName" @bind-Value="Customer.ContactName" class="form-control"></InputText>
                                <ValidationMessage For="() => Customer.ContactName"></ValidationMessage>

                                <label for="PhoneNumber">Phone number</label>
                                <InputText Id="PhoneNumber" @bind-Value="Customer.PhoneNumber" class="form-control"></InputText>
                                <ValidationMessage For="() => Customer.PhoneNumber"></ValidationMessage>

                                <label for="Email">Email addres</label>
                                <InputText Id="Email" @bind-Value="Customer.EmailAddress" class="form-control"></InputText>

                                <br/>

                                <h5 class="card-title text-secondary">Address</h5>
                                <hr/>
                                <label for="Street">Steet</label>
                                <InputText Id="Street" @bind-Value="Customer.Street" class="form-control"></InputText>
                                <ValidationMessage For="() => Customer.Street"></ValidationMessage>

                                <label for="City">City</label>
                                <InputText Id="City" @bind-Value="Customer.City" class="form-control"></InputText>
                                <ValidationMessage For="() => Customer.City"></ValidationMessage>

                                <label for="State">State</label>
                                <InputText Id="State" @bind-Value="Customer.State" class="form-control"></InputText>
                                <ValidationMessage For="() => Customer.State"></ValidationMessage>

                                <label for="ZipCode">Zip Code</label>
                                <InputText Id="ZipCode" @bind-Value="Customer.ZipCode" class="form-control"></InputText>
                                <ValidationMessage For="() => Customer.ZipCode"></ValidationMessage>

                            </div>
                        </EditForm>
                    </div>
                }
            </div>

            <div class="modal-footer">
                <div class="form-group mt-2">
                    <button class="btn btn-primary" form="customerForm">@Title</button>
                    <NavLink href="customers" class="btn btn-secondary" @onclick="() => ModalCancel()">Cancel</NavLink>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    private CustomerDto Customer { get; set; } = new CustomerDto();
    private string Title { get; set; } = "Create";
    private bool IsLoading { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public int Id { get; set; }


    private Task ModalCancel()
    {
        return OnClose.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
    //create
                IsLoading = false;
            }
            else
            {
    //update
                Title = "Update";
                await LoadCustomer();
            }
        }
    }

    private async Task LoadCustomer()
    {
        IsLoading = true;
        StateHasChanged();
        Customer = await CustomerRepository.GetAsync(Id);
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpdateInsertCustomer()
    {
        if (Customer.Id == 0)
        {
    //create
            await CustomerRepository.CreateAsync(Customer);
        }
        else
        {
    //update
            await CustomerRepository.UpdateAsync(Customer);
        }
        await ModalCancel();
    }
}